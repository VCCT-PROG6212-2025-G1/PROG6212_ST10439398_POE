<!--------------------- Start of File ------------------------->
@model CMCS.Models.Claim
@{
    ViewData["Title"] = "Claim Status Tracking";
    Layout = "_Layout";
}

<style>
    .tracking-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
    }

    .tracking-header {
        background: white;
        padding: 30px;
        border-radius: 16px;
        margin-bottom: 20px;
        text-align: center;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

        .tracking-header h1 {
            color: #1e3a8a;
            font-size: 2rem;
            font-weight: 700;
            margin: 0 0 8px 0;
        }

        .tracking-header p {
            color: #6b7280;
            margin: 0;
        }

    .claim-info-card {
        background: white;
        padding: 30px;
        border-radius: 16px;
        margin-bottom: 20px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .claim-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 25px;
        padding-bottom: 15px;
        border-bottom: 2px solid #e5e7eb;
    }

    .claim-title {
        color: #1e3a8a;
        font-size: 1.5rem;
        font-weight: 700;
        margin: 0;
    }

    .claim-subtitle {
        color: #6b7280;
        font-size: 0.9rem;
        margin-top: 5px;
    }

    .status-badge {
        display: inline-block;
        padding: 8px 16px;
        border-radius: 12px;
        font-size: 0.9rem;
        font-weight: 600;
    }

    .status-submitted {
        background: #dbeafe;
        color: #1e40af;
    }

    .status-review {
        background: #fef3c7;
        color: #92400e;
    }

    .status-approved {
        background: #d1fae5;
        color: #065f46;
    }

    .status-rejected {
        background: #fee2e2;
        color: #991b1b;
    }

    .status-processing {
        background: #e0e7ff;
        color: #4338ca;
    }

    .status-paid {
        background: #d1fae5;
        color: #065f46;
    }

    .info-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 20px;
    }

    .info-box {
        background: #f9fafb;
        padding: 20px;
        border-radius: 12px;
        border-left: 4px solid #3b82f6;
    }

    .info-label {
        color: #6b7280;
        font-size: 0.85rem;
        margin-bottom: 5px;
        font-weight: 500;
    }

    .info-value {
        color: #1e3a8a;
        font-size: 1.1rem;
        font-weight: 600;
    }

    .documents-section {
        background: #f9fafb;
        padding: 20px;
        border-radius: 12px;
        margin-top: 30px;
        border: 2px solid #e5e7eb;
    }

    .documents-title {
        color: #1e3a8a;
        font-size: 1.2rem;
        font-weight: 600;
        margin-bottom: 15px;
    }

    .document-item {
        background: white;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 10px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border: 1px solid #e5e7eb;
        transition: all 0.2s;
    }

        .document-item:hover {
            border-color: #3b82f6;
            box-shadow: 0 2px 8px rgba(59, 130, 246, 0.1);
        }

    .document-info {
        display: flex;
        align-items: center;
        gap: 12px;
        flex: 1;
    }

    .document-icon {
        font-size: 1.5rem;
    }

    .document-details {
        flex: 1;
    }

    .document-name {
        color: #374151;
        font-weight: 500;
        display: block;
        margin-bottom: 3px;
    }

    .document-meta {
        color: #6b7280;
        font-size: 0.85rem;
    }

    .btn-download {
        background: #3b82f6;
        color: white;
        padding: 8px 16px;
        border: none;
        border-radius: 6px;
        text-decoration: none;
        font-weight: 600;
        font-size: 0.85rem;
        transition: all 0.2s;
        display: inline-flex;
        align-items: center;
        gap: 5px;
    }

        .btn-download:hover {
            background: #2563eb;
            color: white;
            transform: translateY(-1px);
        }

    .no-documents {
        text-align: center;
        padding: 30px;
        color: #6b7280;
    }

    .timeline-section {
        background: white;
        padding: 30px;
        border-radius: 16px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .timeline-title {
        color: #1e3a8a;
        font-size: 1.5rem;
        font-weight: 700;
        text-align: center;
        margin-bottom: 30px;
    }

    .timeline {
        display: flex;
        justify-content: space-between;
        position: relative;
        padding: 20px 0;
    }

        .timeline::before {
            content: '';
            position: absolute;
            top: 45px;
            left: 10%;
            right: 10%;
            height: 4px;
            background: #e5e7eb;
            z-index: 0;
        }

    .timeline-step {
        flex: 1;
        text-align: center;
        position: relative;
        z-index: 1;
    }

    .timeline-circle {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        margin: 0 auto 15px auto;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        font-weight: 700;
        color: white;
        background: #d1d5db;
        border: 4px solid white;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .timeline-step.completed .timeline-circle {
        background: #10b981;
    }

    .timeline-step.active .timeline-circle {
        background: #3b82f6;
        box-shadow: 0 0 0 8px rgba(59, 130, 246, 0.2);
    }

    .timeline-label {
        color: #1e3a8a;
        font-weight: 600;
        margin-bottom: 5px;
    }

    .timeline-date {
        color: #6b7280;
        font-size: 0.85rem;
    }

    .back-button {
        display: inline-block;
        margin-top: 20px;
        padding: 12px 30px;
        background: #3b82f6;
        color: white;
        text-decoration: none;
        border-radius: 8px;
        font-weight: 600;
        transition: all 0.3s;
    }

        .back-button:hover {
            background: #2563eb;
            transform: translateY(-2px);
            color: white;
        }
</style>

<div class="tracking-container">
    <div class="tracking-header">
        <h1>Claim Status Tracking</h1>
        <p>Track your claim progress transparently from submission to payment</p>
    </div>

    <div class="claim-info-card">
        <div class="claim-header">
            <div>
                <h2 class="claim-title">Claim #CLC-@Model.ClaimId.ToString("D4")</h2>
                <p class="claim-subtitle">Submitted on @Model.SubmissionDate.ToString("dd MMMM yyyy")</p>
            </div>
            <div>
                @{
                    var statusClass = "status-submitted";
                    var statusText = "SUBMITTED";

                    switch (Model.CurrentStatus)
                    {
                        case ClaimStatus.Submitted:
                            statusClass = "status-submitted";
                            statusText = "SUBMITTED";
                            break;
                        case ClaimStatus.UnderReview:
                            statusClass = "status-review";
                            statusText = "UNDER REVIEW";
                            break;
                        case ClaimStatus.Approved:
                            statusClass = "status-approved";
                            statusText = "APPROVED";
                            break;
                        case ClaimStatus.Rejected:
                            statusClass = "status-rejected";
                            statusText = "REJECTED";
                            break;
                        case ClaimStatus.PaymentProcessing:
                            statusClass = "status-processing";
                            statusText = "PAYMENT PROCESSING";
                            break;
                        case ClaimStatus.Paid:
                            statusClass = "status-paid";
                            statusText = "PAID";
                            break;
                    }
                }
                <span class="status-badge @statusClass">@statusText</span>
            </div>
        </div>

        <div class="info-grid">
            <div class="info-box">
                <div class="info-label">Lecturer</div>
                <div class="info-value">@Model.User.FirstName @Model.User.LastName</div>
            </div>
            <div class="info-box">
                <div class="info-label">Module</div>
                <div class="info-value">@Model.Module.ModuleCode - @Model.Module.ModuleName</div>
            </div>
            <div class="info-box">
                <div class="info-label">Hours Worked</div>
                <div class="info-value">@Model.HoursWorked.ToString("0.0") hours</div>
            </div>
            <div class="info-box">
                <div class="info-label">Total Amount</div>
                <div class="info-value">R@(Model.TotalAmount.ToString("N2"))</div>
            </div>
            <div class="info-box">
                <div class="info-label">Submission Date</div>
                <div class="info-value">@Model.SubmissionDate.ToString("dd MMM yyyy")</div>
            </div>
            <div class="info-box">
                <div class="info-label">Current Reviewer</div>
                <div class="info-value">
                    @{
                        var reviewer = "Pending";
                        switch (Model.CurrentStatus)
                        {
                            case ClaimStatus.Submitted:
                                reviewer = "Awaiting Review";
                                break;
                            case ClaimStatus.UnderReview:
                                reviewer = "Programme Coordinator";
                                break;
                            case ClaimStatus.Approved:
                                reviewer = "Academic Manager";
                                break;
                            case ClaimStatus.Rejected:
                                reviewer = "-";
                                break;
                            case ClaimStatus.PaymentProcessing:
                                reviewer = "Finance Department";
                                break;
                            case ClaimStatus.Paid:
                                reviewer = "Completed";
                                break;
                        }
                    }
                    @reviewer
                </div>
            </div>
        </div>

        @if (Model.SupportingDocuments != null && Model.SupportingDocuments.Any())
        {
            <div class="documents-section">
                <h3 class="documents-title">Supporting Documents (@Model.SupportingDocuments.Count)</h3>
                @foreach (var doc in Model.SupportingDocuments)
                {
                    <div class="document-item">
                        <div class="document-info">
                            <span class="document-icon">
                                @if (doc.FileType == ".pdf")
                                {
                                    @:📄
                                }
                                else if (doc.FileType == ".doc" || doc.FileType == ".docx")
                                {
                                    @:📝
                                }
                                else if (doc.FileType == ".xls" || doc.FileType == ".xlsx")
                                {
                                    @:📊
                                }
                                else
                                {
                                    @:📎
                                }
                            </span>
                            <div class="document-details">
                                <span class="document-name">@doc.FileName</span>
                                <span class="document-meta">
                                    @doc.FileType.ToUpper() • @((doc.FileSize / 1024.0 / 1024.0).ToString("0.00")) MB
                                </span>
                            </div>
                        </div>
                        <a href="@doc.FilePath" target="_blank" class="btn-download" download="@doc.FileName">
                            ⬇️ Download
                        </a>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="documents-section">
                <div class="no-documents">
                    <p>📂 No supporting documents uploaded</p>
                </div>
            </div>
        }
    </div>

    <div class="timeline-section">
        <h2 class="timeline-title">Claim Progress Timeline</h2>

        <div class="timeline">
            <div class="timeline-step completed">
                <div class="timeline-circle">1</div>
                <div class="timeline-label">Submitted</div>
                <div class="timeline-date">@Model.SubmissionDate.ToString("dd MMM yyyy")</div>
            </div>

            @{
                var step2Class = Model.CurrentStatus >= ClaimStatus.UnderReview ? "active" : "";
                var step2Date = "Pending";
                if (Model.CurrentStatus >= ClaimStatus.UnderReview)
                {
                    var reviewHistory = Model.StatusHistory?.FirstOrDefault(sh => sh.NewStatus == ClaimStatus.UnderReview);
                    step2Date = reviewHistory?.ChangeDate.ToString("dd MMM yyyy") ?? "Pending";
                }
            }
            <div class="timeline-step @step2Class">
                <div class="timeline-circle">2</div>
                <div class="timeline-label">Under Review</div>
                <div class="timeline-date">@step2Date</div>
            </div>

            @{
                var step3Class = Model.CurrentStatus >= ClaimStatus.Approved ? "completed" : "";
                var step3Date = "Pending";
                if (Model.CurrentStatus >= ClaimStatus.Approved)
                {
                    var approvalHistory = Model.StatusHistory?.FirstOrDefault(sh => sh.NewStatus == ClaimStatus.Approved);
                    step3Date = approvalHistory?.ChangeDate.ToString("dd MMM yyyy") ?? "Pending";
                }
            }
            <div class="timeline-step @step3Class">
                <div class="timeline-circle">3</div>
                <div class="timeline-label">Approved</div>
                <div class="timeline-date">@step3Date</div>
            </div>

            @{
                var step4Class = Model.CurrentStatus == ClaimStatus.PaymentProcessing ? "active" : (Model.CurrentStatus == ClaimStatus.Paid ? "completed" : "");
                var step4Date = "Pending";
                if (Model.CurrentStatus >= ClaimStatus.PaymentProcessing)
                {
                    var processHistory = Model.StatusHistory?.FirstOrDefault(sh => sh.NewStatus == ClaimStatus.PaymentProcessing);
                    step4Date = processHistory?.ChangeDate.ToString("dd MMM yyyy") ?? "Pending";
                }
            }
            <div class="timeline-step @step4Class">
                <div class="timeline-circle">4</div>
                <div class="timeline-label">Payment Processing</div>
                <div class="timeline-date">@step4Date</div>
            </div>

            @{
                var step5Class = Model.CurrentStatus == ClaimStatus.Paid ? "completed" : "";
                var step5Date = "Pending";
                if (Model.CurrentStatus == ClaimStatus.Paid)
                {
                    var paidHistory = Model.StatusHistory?.FirstOrDefault(sh => sh.NewStatus == ClaimStatus.Paid);
                    step5Date = paidHistory?.ChangeDate.ToString("dd MMM yyyy") ?? "Pending";
                }
            }
            <div class="timeline-step @step5Class">
                <div class="timeline-circle">5</div>
                <div class="timeline-label">Paid</div>
                <div class="timeline-date">@step5Date</div>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(Model.AdditionalNotes))
        {
            <div style="margin-top: 40px; padding: 20px; background: #f9fafb; border-radius: 12px; border-left: 4px solid #3b82f6;">
                <h3 style="color: #1e3a8a; margin-bottom: 10px;">Additional Notes</h3>
                <p style="color: #374151; margin: 0;">@Model.AdditionalNotes</p>
            </div>
        }

        @if (Model.StatusHistory != null && Model.StatusHistory.Any())
        {
            <div style="margin-top: 40px; padding: 20px; background: #f9fafb; border-radius: 12px;">
                <h3 style="color: #1e3a8a; margin-bottom: 15px;">Status History</h3>
                @foreach (var history in Model.StatusHistory.OrderBy(h => h.ChangeDate))
                {
                    <div style="padding: 12px; background: white; border-radius: 8px; margin-bottom: 10px; border-left: 4px solid #3b82f6;">
                        <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                            <strong style="color: #1e3a8a;">
                                @switch (history.NewStatus)
                                {
                                    case ClaimStatus.Submitted:
                                        @:Submitted
                                        break;
                                    case ClaimStatus.UnderReview:
                                        @:Under Review
                                        break;
                                    case ClaimStatus.Approved:
                                        @:Approved ✓
                                        break;
                                    case ClaimStatus.Rejected:
                                        @:Rejected ✗
                                        break;
                                    case ClaimStatus.PaymentProcessing:
                                        @:Payment Processing
                                        break;
                                    case ClaimStatus.Paid:
                                        @:Paid
                                        break;
                                }
                            </strong>
                            <span style="color: #6b7280; font-size: 0.9rem;">@history.ChangeDate.ToString("dd MMM yyyy HH:mm")</span>
                        </div>
                        @if (!string.IsNullOrEmpty(history.Comments))
                        {
                            <p style="color: #374151; margin: 0; font-size: 0.9rem;">"@history.Comments"</p>
                        }
                    </div>
                }
            </div>
        }

        <div style="text-align: center;">
            <a asp-action="ClaimHistory" class="back-button">← Back to Claim History</a>
        </div>
    </div>
</div>
<!--------------------- End of File ------------------------->